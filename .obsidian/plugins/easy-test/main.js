/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EasyTestPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {};
var EasyTestPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const openTestIcon = this.addRibbonIcon(
      "notebook-pen",
      "Open Test",
      (evt) => {
        var _a, _b, _c;
        const editor = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor;
        if (!editor) {
          new import_obsidian.Notice("No active editor found.");
          return;
        }
        const doc = (_b = editor.getDoc) == null ? void 0 : _b.call(editor);
        if (!doc) {
          new import_obsidian.Notice("The editor does not have a valid document.");
          return;
        }
        const markdownContent = doc.getValue() || "";
        const title = (_c = this.app.workspace.getActiveFile()) == null ? void 0 : _c.basename;
        new TestModal(this.app, title, markdownContent).open();
      }
    );
    this.addCommand({
      id: "create-test-command",
      name: "Create test command",
      editorCallback: (editor, view) => {
        var _a, _b;
        const doc = (_a = editor.getDoc) == null ? void 0 : _a.call(editor);
        if (!doc) {
          new import_obsidian.Notice("The editor does not have a valid document.");
          return;
        }
        const markdownContent = doc.getValue() || "";
        const title = (_b = this.app.workspace.getActiveFile()) == null ? void 0 : _b.basename;
        const modal = new TestModal(
          this.app,
          title,
          markdownContent
        ).open();
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var TestModal = class extends import_obsidian.Modal {
  constructor(app, title, content) {
    super(app);
    this.content = content;
    this.component = new import_obsidian.Component();
    this.title = title;
    this.activatedInputIndex = 0;
    this.modalEl.addClass("test-modal");
  }
  onOpen() {
    this.contentEl.createEl("h1", { text: this.title });
    this.component.load();
    let inputCounter = 1;
    this.content = this.content.replace(
      /\*\*(.*?)\*\*/g,
      (match, group) => {
        return group.split("").map((char) => {
          let charClass = "";
          if (/^[a-zA-Z]$/.test(char)) {
            charClass = "en";
          } else if (/^[0-9]$/.test(char)) {
            charClass = "num";
          } else if (/^[가-힣]$/.test(char)) {
            charClass = "ko";
          } else if (char === " ") {
            return `<span style="display: inline-block; width: 10px;"></span>`;
          } else {
            return char;
          }
          const id = `ch_${inputCounter}`;
          inputCounter++;
          return `<input id="${id}" class="test-input ${charClass} " type="text" maxlength="1" data-char="${char}"/>`;
        }).join("");
      }
    );
    import_obsidian.MarkdownRenderer.render(
      this.app,
      this.content,
      this.contentEl,
      "",
      this.component
    );
    const inputs = Array.from(
      this.contentEl.querySelectorAll("input.test-input")
    );
    inputs.forEach((input, index) => {
      input.addEventListener("focus", () => {
        const activatedInput = inputs[this.activatedInputIndex];
        activatedInput.removeClass("hint-target");
        this.activatedInputIndex = index;
      });
      input.addEventListener("keydown", (event) => {
        const target = event.target;
        if (event.key === "ArrowLeft" && index > 0) {
          this.moveFocusFoward(inputs, index);
        } else if (event.key === "ArrowRight" || event.key === "Enter") {
          if (index < inputs.length - 1) {
            this.moveFocusBackward(inputs, index);
          }
        }
      });
      input.addEventListener("keydown", (event) => {
        const target = event.target;
        if (event.key === "Backspace" && target.value === "" && index > 0) {
          event.preventDefault();
          this.moveFocusFoward(inputs, index);
        }
      });
      input.addEventListener("input", (event) => {
        const target = event.target;
        const answerChar = target.getAttribute("data-char") || "";
        const inputChar = target.value;
        target.removeClasses(["_vld", "_invld", "_hint-used"]);
        if (inputChar === answerChar) {
          if (index < inputs.length - 1) {
            this.moveFocusBackward(inputs, index);
          }
          target.addClass("_vld");
        } else {
          target.addClass("_invld");
        }
        if (target.value === "")
          target.removeClasses(["_vld", "_invld", "_hint-used"]);
      });
    });
    const hintButton = this.modalEl.createEl("button");
    hintButton.appendText("Hint");
    hintButton.classList.add("hint-button");
    const updateButtonPosition = () => {
      const modalRect = this.modalEl.getBoundingClientRect();
      const containerRect = this.containerEl.getBoundingClientRect();
      const buttonPositionX = containerRect.width / 2 + modalRect.width / 2 - 75;
      const buttonPositionY = modalRect.top + 10;
      hintButton.style.left = `${buttonPositionX}px`;
      hintButton.style.top = `${buttonPositionY}px`;
    };
    updateButtonPosition();
    const resizeObserver = new ResizeObserver(() => {
      updateButtonPosition();
    });
    resizeObserver.observe(this.containerEl);
    hintButton.addEventListener("mouseover", () => {
      const activatedInput = inputs[this.activatedInputIndex];
      activatedInput.addClass("hint-target");
    });
    hintButton.addEventListener("mouseout", () => {
      const activatedInput = inputs[this.activatedInputIndex];
      activatedInput.removeClass("hint-target");
    });
    hintButton.addEventListener("click", () => {
      let activatedInput = inputs[this.activatedInputIndex];
      const charValue = activatedInput.getAttribute("data-char");
      if (charValue !== null) {
        activatedInput.value = charValue;
      } else {
        activatedInput.value = "";
      }
      activatedInput.addClass("_hint-used");
      this.moveFocusBackward(inputs, this.activatedInputIndex);
      activatedInput = inputs[this.activatedInputIndex];
      activatedInput.addClass("hint-target");
    });
  }
  moveFocusFoward(inputs, index) {
    const activatedInput = inputs[index];
    activatedInput.removeClass("hint-target");
    while (index > 0) {
      index -= 1;
      if (!inputs[index].classList.contains("_vld")) {
        inputs[index].focus();
        break;
      }
    }
  }
  moveFocusBackward(inputs, index) {
    const activatedInput = inputs[index];
    activatedInput.removeClass("hint-target");
    while (index < inputs.length - 1) {
      index += 1;
      if (!inputs[index].classList.contains("_vld")) {
        inputs[index].focus();
        break;
      }
    }
  }
  onClose() {
    this.component.unload();
  }
};


/* nosourcemap */